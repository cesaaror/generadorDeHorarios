import { NextResponse } from 'next/server';
import { PrismaClient, Shift } from '@prisma/client';

const prisma = new PrismaClient();

/**
 * üöÄ Modificar un horario existente
 */
export async function PUT(request: Request) {
  try {
    // ‚úÖ Obtener datos del request de forma segura
    const body = await request.json();
    console.log("üì© Request Body recibido:", body);

    // ‚úÖ Validar que el `id` est√© presente y sea un n√∫mero v√°lido
    if (!body.id || typeof body.id !== "number") {
      console.error("‚ùå Error: ID del horario no proporcionado o inv√°lido.");
      return NextResponse.json({ message: '‚ùå Error: ID del horario no proporcionado o inv√°lido.' }, { status: 400 });
    }

    const scheduleId = Number(body.id);

    // ‚úÖ Verificar si el horario existe en la base de datos
    const existingSchedule = await prisma.schedule.findUnique({ where: { id: scheduleId } });
    if (!existingSchedule) {
      console.error("‚ùå Error: Horario no encontrado.");
      return NextResponse.json({ message: '‚ùå Error: Horario no encontrado' }, { status: 404 });
    }

    // ‚úÖ Validar `shift` (Ma√±ana/Tarde)
    if (body.shift && !Object.values(Shift).includes(body.shift as Shift)) {
      console.error("‚ùå Error: Turno inv√°lido", body.shift);
      return NextResponse.json(
        { message: `‚ùå Error: El turno '${body.shift}' no es v√°lido.` },
        { status: 400 }
      );
    }

    // ‚úÖ Validar `date` (Asegurar que sea una fecha v√°lida)
    let newDate: Date | undefined;
    if (body.date) {
      newDate = new Date(body.date);
      if (isNaN(newDate.getTime())) {
        console.error("‚ùå Error: Fecha inv√°lida", body.date);
        return NextResponse.json(
          { message: '‚ùå Error: La fecha proporcionada no es v√°lida.' },
          { status: 400 }
        );
      }
    }

    // ‚úÖ Evitar actualizar si no hay cambios
    if (!newDate && !body.shift) {
      console.warn("‚ö†Ô∏è Advertencia: No se enviaron datos nuevos para actualizar.");
      return NextResponse.json(
        { message: '‚ö†Ô∏è Advertencia: No se enviaron datos nuevos para actualizar' },
        { status: 400 }
      );
    }

    // ‚úÖ Actualizar el horario en la base de datos
    const updatedSchedule = await prisma.schedule.update({
      where: { id: scheduleId },
      data: {
        ...(newDate && { date: newDate }),
        ...(body.shift && { shift: body.shift }),
      },
    });

    console.log("‚úÖ Horario actualizado con √©xito:", updatedSchedule);

    return NextResponse.json(
      { message: '‚úÖ Horario actualizado exitosamente', updatedSchedule },
      { status: 200 }
    );

  } catch (error: any) {
    console.error("‚ùå Error inesperado al actualizar el horario:", error);
    return NextResponse.json(
      { message: 'üö® Error interno al actualizar el horario.', error: error?.message || 'Desconocido' },
      { status: 500 }
    );
  }
}
